
#include <bits/stdc++.h> 
using namespace std;

class Newtonfor{
  private:
  float value;
  float find_p(float p,int n)
  {
    float temp=p;
    for(int i=1;i<n;i++)
    {
      temp=temp*(p-i);
    }
    return temp;
  }
   int  fct(int n)
  {
    int f=1;
    for(int i=2;i<=n;i++) 
    {
      f*=i;
    }
    return f;
  }
  public:
  Newtonfor(float val):value(val){}
  void func()
  {
    int n=4;
    float x[]={1,3,5,7};
    float in_y[]={24,120,336,720};
    float y[n][n];
    for(int i=0;i<n;i++)
    {
      y[i][0]=in_y[i];
    }
    for(int i=1;i<n;i++)
    {
      for(int j=0;j<n-i;j++)
      {
        y[j][i]=y[j+1][i-1]-y[j][i-1];
      }
    }
    for(int i=0;i<n;i++)
    {
      cout<<setw(5)<<x[i]<<"\t";
      for(int j=0;j<n-i;j++)
      {
        cout<<setw(5)<<y[i][j]<<"\t";
      }
      cout<<endl;
    }
    float sum=y[0][0];
    float p=(value-x[0])/(x[1]-x[0]);
    for(int i=1;i<n;i++)
    {
      sum=sum+(find_p(p,i)*y[0][i])/fct(i);
    }
    cout<<"value of "<<value <<"is" <<sum;



  }
};
int main()
{
  float value=4;
  Newtonfor newton(value);
  newton.func();

}
 
